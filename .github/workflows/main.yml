name: Build & Deploy Laravel (FTPS, single-zip + docs)

on:
  push:
    branches: [ main, master ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  LARAVEL_DIR: .
  REMOTE_BASE: wezone_laravel/      # relative to FTP home (/home/wezapp)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      DEPLOY_HOOK_URL: ${{ secrets.DEPLOY_HOOK_URL }}     # e.g. https://api.wezone.app/deploy/unpack
      DEPLOY_HOOK_TOKEN: ${{ secrets.DEPLOY_HOOK_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, gd, zip, pdo_mysql
          tools: composer:v2
          coverage: none

      - name: Composer install (prod)
        run: |
          composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction --no-progress
          composer dump-autoload -o

      - name: Setup Node (LTS) & build Vite
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: |
          if [ -f package.json ]; then
            npm ci
            npm run build
          else
            echo "No package.json, skipping Vite build."
          fi

      - name: Generate Scribe docs (HTML + Postman + OpenAPI)
        run: php artisan scribe:generate --force

      - name: Package app (single zip)
        run: |
          rm -f app.zip
          # exclude env, node junk, GH meta, logs, and any public_html overrides
          zip -rq app.zip . \
            -x "*.git*" ".github/*" "node_modules/*" "storage/logs/*" ".env" "public_html/*"
          mkdir -p deploy && mv app.zip deploy/

      - name: Upload app.zip (FTPS)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: ${{ secrets.FTP_PORT }}
          local-dir: deploy/
          server-dir: ${{ env.REMOTE_BASE }}
          state-name: .ftp-deploy-sync-zip.json
          dangerous-clean-slate: false

      # ---- FTP-based cache cleanup on the HOST (empties dirs safely) ----
      - name: Prepare empty dir for remote cleanup
        run: mkdir -p empty

      - name: Clean bootstrap/cache on host (FTPS)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: ${{ secrets.FTP_PORT }}
          local-dir: empty/
          server-dir: ${{ env.REMOTE_BASE }}bootstrap/cache/
          state-name: .ftp-clean-bootstrap-cache.json
          dangerous-clean-slate: true

      - name: Clean storage/framework/cache on host (FTPS)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: ${{ secrets.FTP_PORT }}
          local-dir: empty/
          server-dir: ${{ env.REMOTE_BASE }}storage/framework/cache/
          state-name: .ftp-clean-storage-cache.json
          dangerous-clean-slate: true

      - name: Clean storage/framework/views on host (FTPS)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: ${{ secrets.FTP_PORT }}
          local-dir: empty/
          server-dir: ${{ env.REMOTE_BASE }}storage/framework/views/
          state-name: .ftp-clean-storage-views.json
          dangerous-clean-slate: true
      # -------------------------------------------------------------------

      - name: Unpack & activate on server
        if: ${{ env.DEPLOY_HOOK_URL != '' && env.DEPLOY_HOOK_TOKEN != '' }}
        run: |
          curl -fsSL -X POST \
            -H "X-Deploy-Token: ${{ env.DEPLOY_HOOK_TOKEN }}" \
            "${{ env.DEPLOY_HOOK_URL }}"
